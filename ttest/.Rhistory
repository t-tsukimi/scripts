geom_line() +
scale_x_datetime(breaks = as.POSIXct(paste("2017-", 1:12, "-01", sep = "")),
labels = paste(1:12, "月", sep = "")) +
scale_y_continuous(breaks = seq(0, 150000, 25000), labels = comma) +
scale_colour_discrete(name = "")
#guides(title = element_blank(),  label = c("いいね", "リツイート"))
ggplot(data = day_plot, aes(x = day, y = value, colour = group)) +
ggtitle("けものフレンズ公式アカウント　いいね数・リツイート数") +
theme(plot.title = element_text(family = "HiraginoSans-W3",
hjust = 0.5),
axis.title = element_blank(),
axis.text.x = element_text(family = "HiraginoSans-W3",
size = 8)) +
geom_line() +
scale_x_datetime(breaks = as.POSIXct(paste("2017-", 1:12, "-01", sep = "")),
labels = paste(1:12, "月", sep = "")) +
scale_y_continuous(breaks = seq(0, 150000, 25000), labels = comma) +
scale_colour_discrete(name = element_blank(), labels = c("いいね", リツイート))
ggplot(data = day_plot, aes(x = day, y = value, colour = group)) +
ggtitle("けものフレンズ公式アカウント　いいね数・リツイート数") +
theme(plot.title = element_text(family = "HiraginoSans-W3",
hjust = 0.5),
axis.title = element_blank(),
axis.text.x = element_text(family = "HiraginoSans-W3",
size = 8)) +
geom_line() +
scale_x_datetime(breaks = as.POSIXct(paste("2017-", 1:12, "-01", sep = "")),
labels = paste(1:12, "月", sep = "")) +
scale_y_continuous(breaks = seq(0, 150000, 25000), labels = comma) +
scale_colour_discrete(name = element_blank(), labels = c("いいね", "リツイート"))
#guides(title = element_blank(),  label = c("いいね", "リツイート"))
ggplot(data = day_plot, aes(x = day, y = value, colour = group)) +
ggtitle("けものフレンズ公式アカウント　いいね数・リツイート数") +
theme(plot.title = element_text(family = "HiraginoSans-W3",
hjust = 0.5),
axis.title = element_blank(),
axis.text.x = element_text(family = "HiraginoSans-W3",
size = 8)) +
geom_line() +
scale_x_datetime(breaks = as.POSIXct(paste("2017-", 1:12, "-01", sep = "")),
labels = paste(1:12, "月", sep = "")) +
scale_y_continuous(breaks = seq(0, 150000, 25000), labels = comma) +
scale_colour_discrete(name = element_blank(), labels = c("いいね", "リツイート"), family = "HiraginoSans-W3")
ggplot(data = day_plot, aes(x = day, y = value, colour = group)) +
ggtitle("けものフレンズ公式アカウント　いいね数・リツイート数") +
theme(plot.title = element_text(family = "HiraginoSans-W3",
hjust = 0.5),
axis.title = element_blank(),
axis.text.x = element_text(family = "HiraginoSans-W3",
size = 8),
legend.text = element_text(family = "HiraginoSans-W3")) +
geom_line() +
scale_x_datetime(breaks = as.POSIXct(paste("2017-", 1:12, "-01", sep = "")),
labels = paste(1:12, "月", sep = "")) +
scale_y_continuous(breaks = seq(0, 150000, 25000), labels = comma) +
scale_colour_discrete(name = element_blank(), labels = c("いいね", "リツイート"))
#guides(title = element_blank(),  label = c("いいね", "リツイート"))
ggplot(data = day_plot, aes(x = day, y = value, colour = group)) +
ggtitle("けものフレンズ公式アカウント　いいね数・リツイート数") +
theme(plot.title = element_text(family = "HiraginoSans-W3",
hjust = 0.5),
axis.title = element_blank(),
axis.text.x = element_text(family = "HiraginoSans-W3",
size = 8),
legend.text = element_text(family = "HiraginoSans-W3")) +
geom_line() +
scale_x_datetime(breaks = as.POSIXct(paste("2017-", 1:12, "-01", sep = "")),
labels = paste(1:12, "月", sep = "")) +
scale_y_continuous(breaks = seq(0, 150000, 25000), labels = comma) +
scale_colour_discrete(name = element_blank(), labels = c("いいね", "リツイート"))
ggplot(data = day_plot, aes(x = day, y = value, colour = group)) +
ggtitle("けものフレンズ公式アカウント　いいね数・リツイート数") +
theme(plot.title = element_text(family = "HiraginoSans-W3",
hjust = 0.5),
axis.title = element_blank(),
axis.text.x = element_text(family = "HiraginoSans-W3",
size = 8),
legend.text = element_text(family = "HiraginoSans-W3")) +
geom_line() +
scale_x_datetime(breaks = as.POSIXct(paste("2017-", 1:12, "-01", sep = "")),
labels = paste(1:12, "月", sep = "")) +
scale_y_continuous(labels = comma) +
scale_colour_discrete(name = element_blank(), labels = c("いいね", "リツイート"))
View(tw_per_day)
day_df <- data.frame(day = rev(unique(tl$day)),
favorite_count = tapply(tl$favorite_count, tl$day, sum),
retweet_count = tapply(tl$retweet_count, tl$day, sum))
#1日あたりのツイート数で基準化
day_df$favorite_count <- day_df$favorite_count / tw_per_day$Freq
day_df$retweet_count <- day_df$retweet_count / tw_per_day$Freq
#ggplot用に整形
day_plot <- tidyr::gather(day_df, key = "group", value = "value",
c("favorite_count", "retweet_count"))
ggplot(data = day_plot, aes(x = day, y = value, colour = group)) +
ggtitle("けものフレンズ公式アカウント　いいね数・リツイート数") +
theme(plot.title = element_text(family = "HiraginoSans-W3",
hjust = 0.5),
axis.title = element_blank(),
axis.text.x = element_text(family = "HiraginoSans-W3",
size = 8),
legend.text = element_text(family = "HiraginoSans-W3")) +
geom_line() +
scale_x_datetime(breaks = as.POSIXct(paste("2017-", 1:12, "-01", sep = "")),
labels = paste(1:12, "月", sep = "")) +
scale_y_continuous(labels = comma) +
scale_colour_discrete(name = element_blank(), labels = c("いいね", "リツイート"))
day_df <- data.frame(day = rev(unique(tl$day)),
favorite_count = tapply(tl$favorite_count, tl$day, sum),
retweet_count = tapply(tl$retweet_count, tl$day, sum))
#ggplot用に整形
day_plot <- tidyr::gather(day_df, key = "group", value = "value",
c("favorite_count", "retweet_count"))
ggplot(data = day_plot, aes(x = day, y = value, colour = group)) +
ggtitle("けものフレンズ公式アカウント　いいね数・リツイート数") +
theme(plot.title = element_text(family = "HiraginoSans-W3",
hjust = 0.5),
axis.title = element_blank(),
axis.text.x = element_text(family = "HiraginoSans-W3",
size = 8),
legend.text = element_text(family = "HiraginoSans-W3")) +
geom_line() +
scale_x_datetime(breaks = as.POSIXct(paste("2017-", 1:12, "-01", sep = "")),
labels = paste(1:12, "月", sep = "")) +
scale_y_continuous(labels = comma) +
scale_colour_discrete(name = element_blank(), labels = c("いいね", "リツイート"))
day_df$fav_rt <- day_df$favorite_count + day_df$retweet_count
ggplot(data = day_df, aes(x = day, y = fav_rt, group = 1)) +
ggtitle("けものフレンズ公式アカウント　いいね+リツイート数") +
theme(plot.title = element_text(family = "HiraginoSans-W3",
hjust = 0.5),
axis.title = element_blank(),
axis.text.x = element_text(family = "HiraginoSans-W3",
size = 8),
legend.text = element_text(family = "HiraginoSans-W3")) +
geom_line() +
scale_x_datetime(breaks = as.POSIXct(paste("2017-", 1:12, "-01", sep = "")),
labels = paste(1:12, "月", sep = "")) +
scale_y_continuous(labels = comma)
head(day_plot, 5)
head(day_plot[order(day_plot$value, decreasing = T), ], 5)
head(day_df[order(day_df$value, decreasing = T), ], 3)
head(day_df[order(day_df$fav_rt, decreasing = T), ], 3)
head(day_df[order(day_df$fav_rt, decreasing = T), c(-2, -3)], 3)
head(day_df[order(day_df$fav_rt, decreasing = T), "fav_rt"], 3)
head(day_df[order(day_df$fav_rt, decreasing = T), "fav_rt"], 3)
```{r, tw_table}
head(day_df[order(day_df$fav_rt, decreasing = T), ], 3)
head(day_df[order(day_df$fav_rt, decreasing = T), "fav_rt"], 3)
head(day_df[order(day_df$fav_rt, decreasing = T), -1], 3)
head(day_df[order(day_df$fav_rt, decreasing = T), -1], 5)
cbind(day_df, tw_per_day$Freq)
cbind(day_df, tw_per_day$Freq)
head(day_df[order(day_df$fav_rt, decreasing = T), -1], 5)
day_df <- cbind(day_df, tw_per_day$Freq)
head(day_df[order(day_df$fav_rt, decreasing = T), -1], 5)
day_df$Freq <- tw_per_day$Freq
head(day_df[order(day_df$fav_rt, decreasing = T), -1], 5)
View(tl)
tweets <- as.data.frame(tl[, c(c("created_at", "text", "fav_ret"))])
tweets <- as.data.frame(tl[, c("created_at", "text", "fav_ret"))])
tweets <- as.data.frame(tl[, c("created_at", "text", "fav_ret")])
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- as.data.frame(tl[, c("created_at", "text", "fav_ret")])
head(tweets[order(tweets$fav_ret, decreasing = T), ], 10)
View(tweets)
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- as.data.frame(tl[, c("created_at", "text", "fav_ret")])
head(tweets[order(tweets$fav_ret, decreasing = T), ], 10)
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- tl[, c("created_at", "text", "fav_ret")]
head(tweets[order(tweets$fav_ret, decreasing = T), ], 10)
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- as.table(tl[, c("created_at", "text", "fav_ret")])
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- as.data.frame(tl[, c("created_at", "text", "fav_ret")])
head(tweets[order(tweets$fav_ret, decreasing = T), ], 10)
day_df$Freq <- tw_per_day$Freq
head(day_df[order(day_df$fav_rt, decreasing = T), -1], 5)
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- as.data.frame(tl[, c("text", "fav_ret")], row.names = tl$created_at)
head(tweets[order(tweets$fav_ret, decreasing = T), ], 10)
View(tweets)
View(tweets)
rownames(tweets)
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- as.data.frame(tl[, c("created_at", "text", "fav_ret")], )
head(tweets[order(tweets$fav_ret, decreasing = T), ], 10)
View(tweets)
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- as.data.frame(tl[, c("created_at", "text", "fav_ret")])
head(tweets[order(tweets$fav_ret, decreasing = T), ], 5)
head(tweets[order(tweets$fav_ret, decreasing = T), ], 5)
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- as.data.frame(tl[, c("created_at", "text", "fav_ret")], row.names = as.Date(tl$created_at))
head(tweets[order(tweets$fav_ret, decreasing = T), ], 5)
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- as.data.frame(day = as.Date(tl$created_at), tl[, c("text", "fav_ret")])
head(tweets[order(tweets$fav_ret, decreasing = T), ], 5)
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- data.frame(day = as.Date(tl$created_at), tl[, c("text", "fav_ret")])
head(tweets[order(tweets$fav_ret, decreasing = T), ], 5)
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- data.frame(tl[, c("text", "fav_ret")], row.names = as.Date(tl$created_at))
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- data.frame(tl[, c("text", "fav_ret")], row.names = as.character(tl$created_at))
head(tweets[order(tweets$fav_ret, decreasing = T), ], 5)
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- data.frame(tl[, c("text", "fav_ret")], row.names = as.character(as.Date(tl$created_at)))
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- data.frame(tl[, c("text", "fav_ret")], row.names = as.character(tl$created_at))
head(tweets[order(tweets$fav_ret, decreasing = T), ], 5)
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- data.frame(tl[, c("favorite_count", "retweet_count", "fav_ret", "text")], row.names = as.character(tl$created_at))
head(tweets[order(tweets$fav_ret, decreasing = T), ], 5)
Sys.Date()
gsub(pattern = "-", replacement = "", x = Sys.Date())
gsub(pattern = "-", replacement = "", x = Sys.Date()) %>% substr(3, 8)
Sys.Date()
?create_token
dim(tl)
?get_timeline
?search_tweets
dim(tw_per_day)
head(day_df[order(day_df$fav_rt, decreasing = T), -1], 5)
head(day_df[order(day_df$fav_rt, decreasing = T), c(2, 3, 4, 6)], 5)
#いいね＋リツート数の多い日トップ5を表示
head(day_df[order(day_df$fav_rt, decreasing = T), -1], 5)
head(tweets[order(tweets$fav_ret, decreasing = T), -4], 5)
head(tweets[order(tweets$fav_ret, decreasing = T), ], 5)
dim(tw_per_day)
sum(tw_per_day$Freq)
570 / 246
cor(day_df$favorite_count, day_df$retweet_count)
cor(day_df$favorite_count, day_df$retweet_count) %>% round(digits = 2)
ggplot(tw_per_day, aes(x = Freq)) +
ggtitle("けものフレンズ公式アカウント　ツイート数/日") +
theme(plot.title = element_text(family = "HiraginoSans-W3",
hjust = 0.5),
axis.title = element_text(family = "HiraginoSans-W3",
size = 10)) +
geom_histogram(bins = 10, binwidth = 1) +
#scale_x_continuous(breaks = 1:10, labels = 1:10) +
xlab("ツイート数/日") + ylab("頻度")
ggplot(tw_per_day, aes(x = Freq)) +
ggtitle("けものフレンズ公式アカウント　ツイート数/日") +
theme(plot.title = element_text(family = "HiraginoSans-W3",
hjust = 0.5),
axis.title = element_text(family = "HiraginoSans-W3",
size = 10)) +
geom_histogram(bins = 20, binwidth = 1) +
#scale_x_continuous(breaks = 1:10, labels = 1:10) +
xlab("ツイート数/日") + ylab("頻度")
ggplot(tw_per_day, aes(x = Freq)) +
ggtitle("けものフレンズ公式アカウント　ツイート数/日") +
theme(plot.title = element_text(family = "HiraginoSans-W3",
hjust = 0.5),
axis.title = element_text(family = "HiraginoSans-W3",
size = 10)) +
geom_histogram(bins = 20, binwidth = .5) +
#scale_x_continuous(breaks = 1:10, labels = 1:10) +
xlab("ツイート数/日") + ylab("頻度")
ggplot(tw_per_day, aes(x = Freq)) +
ggtitle("けものフレンズ公式アカウント　ツイート数/日") +
theme(plot.title = element_text(family = "HiraginoSans-W3",
hjust = 0.5),
axis.title = element_text(family = "HiraginoSans-W3",
size = 10)) +
geom_histogram(bins = 5, binwidth = .5) +
#scale_x_continuous(breaks = 1:10, labels = 1:10) +
xlab("ツイート数/日") + ylab("頻度")
summary(tw_per_day$Freq)
ggplot(tw_per_day, aes(x = Freq)) +
ggtitle("けものフレンズ公式アカウント　ツイート数/日") +
theme(plot.title = element_text(family = "HiraginoSans-W3",
hjust = 0.5),
axis.title = element_text(family = "HiraginoSans-W3",
size = 10)) +
geom_histogram(bins = 9, binwidth = 1) +
scale_x_continuous(breaks = 1:9, labels = 1:9) +
xlab("ツイート数/日") + ylab("頻度")
png("~/Documents/blog/kemono_text_minig/histogram.png", width = 3000, height = 1500, res = 300)
ggplot(tw_per_day, aes(x = Freq)) +
ggtitle("けものフレンズ公式アカウント　ツイート数/日") +
theme(plot.title = element_text(family = "HiraginoSans-W3",
hjust = 0.5),
axis.title = element_text(family = "HiraginoSans-W3",
size = 10)) +
geom_histogram(bins = 9, binwidth = 1) +
scale_x_continuous(breaks = 1:9, labels = 1:9) +
xlab("ツイート数/日") + ylab("頻度")
dev.off()
log10(1.5)
10 ^ 1.5
10 ^ 1.7
10 ^ 0.5
10 ^ 0.5
10 ^ 0.1
10 ^ 0.3
10 ^ -0.7
10 ^ -0.3
10 ^ 0.3
10 ^ 0.7
result <- c()
formatC(1,width=2,flag="0")
formatC(1,width = 4,flag="0")
#180228:DDBJ登録の「Run」でRun/Analysis contains files列を出力------------------
make_Runname <- function(runname1st, num) {
name <- substr(runname1st, start = 1, stop = (nchar(runname1st) - 4))
result <- c()
for (i in 1:num) {
add_name <- paste(name, formatC(num,width = 4, flag = "0"), sep = "")
result <- c(result, rep(add_name, 2))
}
return(result)
}
make_Runname("fukushin-0014_Run_0001", 32)
#180228:DDBJ登録の「Run」でRun/Analysis contains files列を出力------------------
make_Runname <- function(runname1st, num) {
name <- substr(runname1st, start = 1, stop = (nchar(runname1st) - 4))
result <- c()
for (i in 1:num) {
add_name <- paste(name, formatC(i, width = 4, flag = "0"), sep = "")
result <- c(result, rep(add_name, 2))
}
return(result)
}
make_Runname("fukushin-0014_Run_0001", 32)
make_Runname("fukushin-0014_Run_0001", 32) %>% cat()
make_Runname("fukushin-0014_Run_0001", 32) %>% print()
make_Runname("fukushin-0014_Run_0001", 32) %>% cat()
getwd()
#180228:DDBJ登録の「Run」でRun/Analysis contains files列を出力------------------
make_Runname <- function(runname1st, num) {
name <- substr(runname1st, start = 1, stop = (nchar(runname1st) - 4))
result <- c()
for (i in 1:num) {
add_name <- paste(name, formatC(i, width = 4, flag = "0"), sep = "")
result <- c(result, rep(add_name, 2))
}
write.csv(result, paste(substr(name, start = 1, stop = (nchar(name) - 1))),
"_RunnameVec.csv", sep = "")
}
make_Runname("fukushin-0014_Run_0001", 32)
paste(substr(name, start = 1, stop = (nchar(name) - 1))),
"_RunnameVec.csv", sep = ""
paste(substr(name, start = 1, stop = (nchar(name) - 1)),
"_RunnameVec.csv", sep = "")
#180228:DDBJ登録の「Run」でRun/Analysis contains files列を出力------------------
make_Runname <- function(runname1st, num) {
name <- substr(runname1st, start = 1, stop = (nchar(runname1st) - 4))
result <- c()
for (i in 1:num) {
add_name <- paste(name, formatC(i, width = 4, flag = "0"), sep = "")
result <- c(result, rep(add_name, 2))
}
write.csv(result, paste(substr(name, start = 1, stop = (nchar(name) - 1)),
"_RunnameVec.csv", sep = ""))
}
make_Runname("fukushin-0014_Run_0001", 32)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
ターミナル(端末)を起動します。
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
python 001_gz_extract.py sequence_data/
# Chunk 1
cd Desktop/Shared_Folder/sp2018/
# Chunk 2
plot(cars)
log10(34)
log10(0.05)
10 ^ -34
10 ^-3.4
?read.csv
#データを読み込む
experiment <- read.csv("metabolites.csv", header = T, 1)
#データを読み込む
experiment <- read.csv(T, "metabolites.csv",  row.names = 1)
values <- seq(1, 10)
values <- seq(1, 10, 2)
#181015の宿題回答
# 1.「1, 2, 3, 4, 5, 6, 7, 8, 9, 10」を「values」という変数　
# に格納してください。
values <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
values <- c(1:10)
values <- seq(1, 10)
# 2.関数を使わずにvaluesの平均値を求めて下さい。
values / 10
# 2.関数を使わずにvaluesの平均値を求めて下さい。
sum(values) / 10
# 2.関数を使わずにvaluesの平均値を求めて下さい。
(1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10) / 10
# 3.関数を使ってvaluesの平均値を求めて下さい。
sum(values) / 10
mean(values)
# 4.valuesの各値から2や3で求めた平均値を引いて下さい。
values - mean(values)
# 5.4で求めた各値を2乗してください。
(values - mean(values)) ^ 2
# 6.5で求めた値を全て足し合わせ、9で割って下さい。
sum((values - mean(values)) ^ 2) / 9
# 標準偏差と分散は以下の関数で求められる
sd(values)
# 標準偏差と分散は以下の関数で求められる
var(values)
0.999 ^3
1 - 0.999 ^3
(1 - 0.999 ^3)^2 + (1 - 0.999 ^3) * 2
log10(35)
-10 * log10(0.001)
10 ^ (35 / -10)
1 - 10 ^ (35 / -10)
1-0.9996838^3
(1-0.9996838)^3
(1 - 0.9996838 ^3)^2 + (1 - 0.9996838 ^3) * 2
rm(list = ls()) #オブジェクト全削除
?t.test
p.adjust()
?p.adjust
#必要なパッケージがない場合はインストール
targetPackages <- c("stats")
newPackages <- targetPackages[!(targetPackages %in% installed.packages()[,"Package"])]
if(length(newPackages) > 0) {
install.packages(newPackages, repos = "http://cran.ism.ac.jp/",
dependencies = T)
}
#パッケージの読み込み
for(package in targetPackages) {
library(package, character.only = T)
}
getwd()
setwd("/Users/tt/Documents/project/class/programing/R/ttest/")
#ファイルの読み込み(groupの順はコントロールを1番上にすること)
dt <- read.csv("ttest_input.csv", header = T, row.names = 1) #変更箇所2
#検定するためのデータ整形
dt$group <- factor(dt$group, levels = unique(dt$group))
variable_len <- ncol(dt) -1
group1 <- dt$group == unique(dt$group)[1]
group2 <- dt$group == unique(dt$group)[2]
#検定
p <- c()
i <- 1
value1 <- dt[, i][group1]
value2 <- dt[, i][group2]
result <- t.test(value1, value2, paired = F, var.equal = F)
result
p <- c(p, result$p.value)
#検定
p <- c()
for (i in 1:variable_len) {
value1 <- dt[, i][group1]
value2 <- dt[, i][group2]
result <- t.test(value1, value2, paired = F, var.equal = F)
p <- c(p, result$p.value)
}
#ファイルの読み込み
dt <- read.csv("ttest_input.csv", header = T, row.names = 1)
#検定するためのデータ整形
dt$group <- factor(dt$group, levels = unique(dt$group))
variable_len <- ncol(dt) -1
group1 <- dt$group == unique(dt$group)[1]
group2 <- dt$group == unique(dt$group)[2]
#検定
p <- c()
for (i in 1:variable_len) {
value1 <- dt[, i][group1]
value2 <- dt[, i][group2]
result <- t.test(value1, value2, paired = F, var.equal = F)
p <- c(p, result$p.value)
}
#ファイルの読み込み
dt <- read.csv("ttest_input.csv", header = T, row.names = 1)
#検定するためのデータ整形
dt$group <- factor(dt$group, levels = unique(dt$group))
variable_len <- ncol(dt) -1
group1 <- dt$group == unique(dt$group)[1]
group2 <- dt$group == unique(dt$group)[2]
#検定
p <- c()
for (i in 1:variable_len) {
value1 <- dt[, i][group1]
value2 <- dt[, i][group2]
result <- t.test(value1, value2, paired = F, var.equal = F)
p <- c(p, result$p.value)
}
df <- data.frame(p.val = p, FDR = p.adjust(p, method = "BH"),
row.names = colnames(dt)[1:variable_len])
dt$group[1]
#ファイルの書き込み
fn <- paste("t.test_result_", unique(dt$group)[1],
"_", unique(dt$group)[2], ".csv", sep = "")
write.csv(df, fn)
#検定
if(type == "student") {
paired <- F
var.equal <- F
}
type <- "student"
#検定
if(type == "student") {
paired <- F
var.equal <- F
}
result <- t.test(value1, value2, paired = T, var.equal = F)
value2 <- value2[1:7]
result <- t.test(value1, value2, paired = T, var.equal = F)
result <- t.test(value1, value2, paired = T, var.equal = T)
result <- t.test(value1, value2, paired = T, var.equal = F)
result
result <- t.test(value1, value2, paired = T, var.equal = T)
result
q("no")
