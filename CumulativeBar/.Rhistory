tweets <- as.data.frame(tl[, c("created_at", "text", "fav_ret"))])
tweets <- as.data.frame(tl[, c("created_at", "text", "fav_ret")])
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- as.data.frame(tl[, c("created_at", "text", "fav_ret")])
head(tweets[order(tweets$fav_ret, decreasing = T), ], 10)
View(tweets)
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- as.data.frame(tl[, c("created_at", "text", "fav_ret")])
head(tweets[order(tweets$fav_ret, decreasing = T), ], 10)
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- tl[, c("created_at", "text", "fav_ret")]
head(tweets[order(tweets$fav_ret, decreasing = T), ], 10)
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- as.table(tl[, c("created_at", "text", "fav_ret")])
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- as.data.frame(tl[, c("created_at", "text", "fav_ret")])
head(tweets[order(tweets$fav_ret, decreasing = T), ], 10)
day_df$Freq <- tw_per_day$Freq
head(day_df[order(day_df$fav_rt, decreasing = T), -1], 5)
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- as.data.frame(tl[, c("text", "fav_ret")], row.names = tl$created_at)
head(tweets[order(tweets$fav_ret, decreasing = T), ], 10)
View(tweets)
View(tweets)
rownames(tweets)
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- as.data.frame(tl[, c("created_at", "text", "fav_ret")], )
head(tweets[order(tweets$fav_ret, decreasing = T), ], 10)
View(tweets)
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- as.data.frame(tl[, c("created_at", "text", "fav_ret")])
head(tweets[order(tweets$fav_ret, decreasing = T), ], 5)
head(tweets[order(tweets$fav_ret, decreasing = T), ], 5)
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- as.data.frame(tl[, c("created_at", "text", "fav_ret")], row.names = as.Date(tl$created_at))
head(tweets[order(tweets$fav_ret, decreasing = T), ], 5)
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- as.data.frame(day = as.Date(tl$created_at), tl[, c("text", "fav_ret")])
head(tweets[order(tweets$fav_ret, decreasing = T), ], 5)
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- data.frame(day = as.Date(tl$created_at), tl[, c("text", "fav_ret")])
head(tweets[order(tweets$fav_ret, decreasing = T), ], 5)
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- data.frame(tl[, c("text", "fav_ret")], row.names = as.Date(tl$created_at))
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- data.frame(tl[, c("text", "fav_ret")], row.names = as.character(tl$created_at))
head(tweets[order(tweets$fav_ret, decreasing = T), ], 5)
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- data.frame(tl[, c("text", "fav_ret")], row.names = as.character(as.Date(tl$created_at)))
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- data.frame(tl[, c("text", "fav_ret")], row.names = as.character(tl$created_at))
head(tweets[order(tweets$fav_ret, decreasing = T), ], 5)
tl$fav_ret <- tl$favorite_count + tl$retweet_count
tweets <- data.frame(tl[, c("favorite_count", "retweet_count", "fav_ret", "text")], row.names = as.character(tl$created_at))
head(tweets[order(tweets$fav_ret, decreasing = T), ], 5)
Sys.Date()
gsub(pattern = "-", replacement = "", x = Sys.Date())
gsub(pattern = "-", replacement = "", x = Sys.Date()) %>% substr(3, 8)
Sys.Date()
?create_token
dim(tl)
?get_timeline
?search_tweets
dim(tw_per_day)
head(day_df[order(day_df$fav_rt, decreasing = T), -1], 5)
head(day_df[order(day_df$fav_rt, decreasing = T), c(2, 3, 4, 6)], 5)
#いいね＋リツート数の多い日トップ5を表示
head(day_df[order(day_df$fav_rt, decreasing = T), -1], 5)
head(tweets[order(tweets$fav_ret, decreasing = T), -4], 5)
head(tweets[order(tweets$fav_ret, decreasing = T), ], 5)
dim(tw_per_day)
sum(tw_per_day$Freq)
570 / 246
cor(day_df$favorite_count, day_df$retweet_count)
cor(day_df$favorite_count, day_df$retweet_count) %>% round(digits = 2)
ggplot(tw_per_day, aes(x = Freq)) +
ggtitle("けものフレンズ公式アカウント　ツイート数/日") +
theme(plot.title = element_text(family = "HiraginoSans-W3",
hjust = 0.5),
axis.title = element_text(family = "HiraginoSans-W3",
size = 10)) +
geom_histogram(bins = 10, binwidth = 1) +
#scale_x_continuous(breaks = 1:10, labels = 1:10) +
xlab("ツイート数/日") + ylab("頻度")
ggplot(tw_per_day, aes(x = Freq)) +
ggtitle("けものフレンズ公式アカウント　ツイート数/日") +
theme(plot.title = element_text(family = "HiraginoSans-W3",
hjust = 0.5),
axis.title = element_text(family = "HiraginoSans-W3",
size = 10)) +
geom_histogram(bins = 20, binwidth = 1) +
#scale_x_continuous(breaks = 1:10, labels = 1:10) +
xlab("ツイート数/日") + ylab("頻度")
ggplot(tw_per_day, aes(x = Freq)) +
ggtitle("けものフレンズ公式アカウント　ツイート数/日") +
theme(plot.title = element_text(family = "HiraginoSans-W3",
hjust = 0.5),
axis.title = element_text(family = "HiraginoSans-W3",
size = 10)) +
geom_histogram(bins = 20, binwidth = .5) +
#scale_x_continuous(breaks = 1:10, labels = 1:10) +
xlab("ツイート数/日") + ylab("頻度")
ggplot(tw_per_day, aes(x = Freq)) +
ggtitle("けものフレンズ公式アカウント　ツイート数/日") +
theme(plot.title = element_text(family = "HiraginoSans-W3",
hjust = 0.5),
axis.title = element_text(family = "HiraginoSans-W3",
size = 10)) +
geom_histogram(bins = 5, binwidth = .5) +
#scale_x_continuous(breaks = 1:10, labels = 1:10) +
xlab("ツイート数/日") + ylab("頻度")
summary(tw_per_day$Freq)
ggplot(tw_per_day, aes(x = Freq)) +
ggtitle("けものフレンズ公式アカウント　ツイート数/日") +
theme(plot.title = element_text(family = "HiraginoSans-W3",
hjust = 0.5),
axis.title = element_text(family = "HiraginoSans-W3",
size = 10)) +
geom_histogram(bins = 9, binwidth = 1) +
scale_x_continuous(breaks = 1:9, labels = 1:9) +
xlab("ツイート数/日") + ylab("頻度")
png("~/Documents/blog/kemono_text_minig/histogram.png", width = 3000, height = 1500, res = 300)
ggplot(tw_per_day, aes(x = Freq)) +
ggtitle("けものフレンズ公式アカウント　ツイート数/日") +
theme(plot.title = element_text(family = "HiraginoSans-W3",
hjust = 0.5),
axis.title = element_text(family = "HiraginoSans-W3",
size = 10)) +
geom_histogram(bins = 9, binwidth = 1) +
scale_x_continuous(breaks = 1:9, labels = 1:9) +
xlab("ツイート数/日") + ylab("頻度")
dev.off()
log10(1.5)
10 ^ 1.5
10 ^ 1.7
10 ^ 0.5
10 ^ 0.5
10 ^ 0.1
10 ^ 0.3
10 ^ -0.7
10 ^ -0.3
10 ^ 0.3
10 ^ 0.7
result <- c()
formatC(1,width=2,flag="0")
formatC(1,width = 4,flag="0")
#180228:DDBJ登録の「Run」でRun/Analysis contains files列を出力------------------
make_Runname <- function(runname1st, num) {
name <- substr(runname1st, start = 1, stop = (nchar(runname1st) - 4))
result <- c()
for (i in 1:num) {
add_name <- paste(name, formatC(num,width = 4, flag = "0"), sep = "")
result <- c(result, rep(add_name, 2))
}
return(result)
}
make_Runname("fukushin-0014_Run_0001", 32)
#180228:DDBJ登録の「Run」でRun/Analysis contains files列を出力------------------
make_Runname <- function(runname1st, num) {
name <- substr(runname1st, start = 1, stop = (nchar(runname1st) - 4))
result <- c()
for (i in 1:num) {
add_name <- paste(name, formatC(i, width = 4, flag = "0"), sep = "")
result <- c(result, rep(add_name, 2))
}
return(result)
}
make_Runname("fukushin-0014_Run_0001", 32)
make_Runname("fukushin-0014_Run_0001", 32) %>% cat()
make_Runname("fukushin-0014_Run_0001", 32) %>% print()
make_Runname("fukushin-0014_Run_0001", 32) %>% cat()
getwd()
#180228:DDBJ登録の「Run」でRun/Analysis contains files列を出力------------------
make_Runname <- function(runname1st, num) {
name <- substr(runname1st, start = 1, stop = (nchar(runname1st) - 4))
result <- c()
for (i in 1:num) {
add_name <- paste(name, formatC(i, width = 4, flag = "0"), sep = "")
result <- c(result, rep(add_name, 2))
}
write.csv(result, paste(substr(name, start = 1, stop = (nchar(name) - 1))),
"_RunnameVec.csv", sep = "")
}
make_Runname("fukushin-0014_Run_0001", 32)
paste(substr(name, start = 1, stop = (nchar(name) - 1))),
"_RunnameVec.csv", sep = ""
paste(substr(name, start = 1, stop = (nchar(name) - 1)),
"_RunnameVec.csv", sep = "")
#180228:DDBJ登録の「Run」でRun/Analysis contains files列を出力------------------
make_Runname <- function(runname1st, num) {
name <- substr(runname1st, start = 1, stop = (nchar(runname1st) - 4))
result <- c()
for (i in 1:num) {
add_name <- paste(name, formatC(i, width = 4, flag = "0"), sep = "")
result <- c(result, rep(add_name, 2))
}
write.csv(result, paste(substr(name, start = 1, stop = (nchar(name) - 1)),
"_RunnameVec.csv", sep = ""))
}
make_Runname("fukushin-0014_Run_0001", 32)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
ターミナル(端末)を起動します。
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
python 001_gz_extract.py sequence_data/
# Chunk 1
cd Desktop/Shared_Folder/sp2018/
# Chunk 2
plot(cars)
log10(34)
log10(0.05)
10 ^ -34
10 ^-3.4
?read.csv
#データを読み込む
experiment <- read.csv("metabolites.csv", header = T, 1)
#データを読み込む
experiment <- read.csv(T, "metabolites.csv",  row.names = 1)
values <- seq(1, 10)
values <- seq(1, 10, 2)
#181015の宿題回答
# 1.「1, 2, 3, 4, 5, 6, 7, 8, 9, 10」を「values」という変数　
# に格納してください。
values <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
values <- c(1:10)
values <- seq(1, 10)
# 2.関数を使わずにvaluesの平均値を求めて下さい。
values / 10
# 2.関数を使わずにvaluesの平均値を求めて下さい。
sum(values) / 10
# 2.関数を使わずにvaluesの平均値を求めて下さい。
(1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10) / 10
# 3.関数を使ってvaluesの平均値を求めて下さい。
sum(values) / 10
mean(values)
# 4.valuesの各値から2や3で求めた平均値を引いて下さい。
values - mean(values)
# 5.4で求めた各値を2乗してください。
(values - mean(values)) ^ 2
# 6.5で求めた値を全て足し合わせ、9で割って下さい。
sum((values - mean(values)) ^ 2) / 9
# 標準偏差と分散は以下の関数で求められる
sd(values)
# 標準偏差と分散は以下の関数で求められる
var(values)
0.999 ^3
1 - 0.999 ^3
(1 - 0.999 ^3)^2 + (1 - 0.999 ^3) * 2
log10(35)
-10 * log10(0.001)
10 ^ (35 / -10)
1 - 10 ^ (35 / -10)
1-0.9996838^3
(1-0.9996838)^3
(1 - 0.9996838 ^3)^2 + (1 - 0.9996838 ^3) * 2
getwd()
#ファイルの読み込み
dt <- read.csv("Documents/project/kure/190414prostatecancer_microbes_agonist_beforeafter_script.csv", header = T, row.names = 1)
#検定するためのデータ整形
dt$group <- factor(dt$group, levels = unique(dt$group))
variable_len <- ncol(dt) -1
group1 <- dt$group == unique(dt$group)[1]
group2 <- dt$group == unique(dt$group)[2]
#t検定の実施
p <- c()
for (i in 1:variable_len) {
value1 <- dt[, i][group1]
value2 <- dt[, i][group2]
result <- wilcox.exact(value1, value2, paired = paired)
p <- c(p, result$p.value)
}
#t検定の実施
p <- c()
for (i in 1:variable_len) {
value1 <- dt[, i][group1]
value2 <- dt[, i][group2]
result <- wilcox.exact(value1, value2, paired = T)
p <- c(p, result$p.value)
}
#t検定の実施
p <- c()
wilcox.exact(c(0, 0, 0, 0, 1), c((0, 0, 1, 0, 0)))
wilcox.exact(c(0, 0, 0, 0, 1), c(0, 0, 1, 0, 0))
wilcox.exact(c(0, 0, 0, 0, 1), c(0, 0, 0, 0, 1))
wilcox.exact(c(0, 0, 0, 0, 1), c(0, 0, 0, 0, 1), paired = T)
a <- c(1, 3, 6, 4)
length(a)
sessionInfo()
remove.packages("vegan")
library(vegan)
update.packages("vegan")
library(vegan)
sessionInfo()
data(varespec)
data(varechem)
vegan::dbrda(varespec ~ N + P + K + Condition(Al), varechem,
dist="bray")
remove.packages("vegan")
rm(list = ls())
wd <- "~/Documents/share/github/scripts/CumulativeBar/"
setwd(wd)
# データの読み込み
raw_dt <- read.csv("table_mc1114_sorted_L6.csv", row.names = 1, header = T, stringsAsFactors = F)
View(raw_dt)
# データの読み込み
dt <- read.csv("boxplotSigBar_input.csv", row.names = 1, header = T, stringsAsFactors = F)
# データの読み込み
dt <- read.csv("table_mc1114_sorted_L6.csv", row.names = 1, header = T, stringsAsFactors = F)
library(gcookbook)
ggplot(cabbage_exp, aes(x = date, y = Weight, fill = Cultivar)) +
geom_bar(stat = "identity")
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar)) +
geom_bar(stat = "identity")
cabbage_exp
#必要なパッケージがない場合はインストール
targetPackages <- c("ggplot2", "scales", "tidyr")
library(tidyr)
View(dt)
# データの読み込み
dt <- read.csv("table_mc1114_sorted_L6.csv", row.names = 1, header = T,
stringsAsFactors = F)
dt <- data.frame(t(dt))
# データの読み込み
dt <- read.csv("table_mc1114_sorted_L6.csv", header = T,
stringsAsFactors = F)
dt <- data.frame(t(dt))
# データの読み込み
dt <- read.csv("table_mc1114_sorted_L6.csv",
stringsAsFactors = F)
dt <- data.frame(t(dt))
# データの読み込み
dt <- read.csv("table_mc1114_sorted_L6.csv", row.names = 1, header = T,
stringsAsFactors = F)
dt <- data.frame(t(dt))
dt_long <- tidyr::gather(dt, key = rownames(dt), value = ra)
View(dt_long)
# データの読み込み
dt <- read.csv("table_mc1114_sorted_L6.csv", row.names = 1, header = T,
stringsAsFactors = F)
View(dt_long)
# データの読み込み
dt <- read.csv("table_mc1114_sorted_L6.csv", row.names = 1, header = T,
stringsAsFactors = F)
dt <- data.frame(t(dt))
cabbage_exp
dt_long <- tidyr::gather(dt, key = rownames(dt), value = ra, colnames(dt))
View(dt_long)
# データの読み込み
dt <- read.csv("table_mc1114_sorted_L6.csv", row.names = 1, header = T,
stringsAsFactors = F)
dt <- data.frame(t(dt))
dt$sample <- rownames(dt)
View(dt)
dt_long <- tidyr::gather(dt, key = sample, value = ra, colnames(dt))
View(dt_long)
# データの読み込み
dt <- read.csv("table_mc1114_sorted_L6.csv", row.names = 1, header = T,
stringsAsFactors = F)
dt <- data.frame(t(dt))
dt$sample <- rownames(dt)
dt_long <- tidyr::gather(dt, key = rownames(dt), value = ra, colnames(dt))
View(dt_long)
dt_long <- tidyr::gather(dt, key = sample, value = ra, colnames(dt))
View(dt_long)
cabbage_exp
# データの読み込み
dt <- read.csv("table_mc1114_sorted_L6.csv", row.names = 1, header = T,
stringsAsFactors = F)
dt <- data.frame(t(dt))
dt$sample <- rownames(dt)
dt_long <- tidyr::gather(dt, key = sample, value = ra, colnames(dt)[1]:colnames(dt)[441])
View(dt_long)
gather()
?gather
dt_long <- tidyr::gather(dt, key = colnames(dt), value = ra)
View(dt_long)
colnames(dt)
dt_long <- tidyr::gather(dt, key = "Unassigned.Other.Other.Other.Other.Other", value = ra)
dt_long <- tidyr::gather(dt, key = "Unassigned.Other.Other.Other.Other.Other","k__Bacteria.p__.Thermi..c__Deinococci.o__Thermales.f__Thermaceae.g__Thermus",  value = ra)
dt_long <- tidyr::gather(dt, key = sample,  value = ra, colnames(dt)[1:441])
View(dt_long)
# データの読み込み
dt <- read.csv("table_mc1114_sorted_L6.csv", row.names = 1, header = T,
stringsAsFactors = F)
dt <- data.frame(t(dt))
dt_long <- tidyr::gather(dt, key = sample_name,  value = ra)
View(dt_long)
# データの読み込み
dt <- read.csv("table_mc1114_sorted_L6.csv", row.names = 1, header = T,
stringsAsFactors = F)
dt <- data.frame(t(dt))
dt$sample <- rownames(dt)
dt_long <- tidyr::gather(dt, key = sample_name,  value = ra, -sample)
View(dt_long)
# データの読み込み
dt <- read.csv("table_mc1114_sorted_L6.csv", row.names = 1, header = T,
stringsAsFactors = F)
dt <- data.frame(t(dt))
dt$sample <- rownames(dt)
dt_long <- tidyr::gather(dt, key = bacteria,  value = ra, -sample)
View(dt_long)
ggplot(dt_long, aes(x = sample, y = ra, fill = bacteria)) +
geom_bar(stat = "identity")
# データの読み込み
dt <- read.csv("table_mc1114_sorted_L6.csv", row.names = 1, header = T,
stringsAsFactors = F)
dt <- data.frame(t(dt))
dt$sample <- rownames(dt)
dt <- dt[1:11, ]
dt_long <- tidyr::gather(dt, key = bacteria,  value = ra, -sample)
ggplot(dt_long, aes(x = sample, y = ra, fill = bacteria)) +
geom_bar(stat = "identity")
View(dt)
# データの読み込み
dt <- read.csv("table_mc1114_sorted_L6.csv", row.names = 1, header = T,
stringsAsFactors = F)
dt <- data.frame(t(dt))
dt$sample <- rownames(dt)
View(dt)
dt <- dt[, c(1:11, 442)]
dt_long <- tidyr::gather(dt, key = bacteria,  value = ra, -sample)
ggplot(dt_long, aes(x = sample, y = ra, fill = bacteria)) +
geom_bar(stat = "identity")
# データの読み込み
dt <- read.csv("table_mc1114_sorted_L6.csv", row.names = 1, header = T,
stringsAsFactors = F)
# データの読み込み
dt <- read.csv("table_mc1114_sorted_L6.csv", row.names = 1, header = T,
stringsAsFactors = F)
rownames(dt) <- paste("bacteria", 1:441, sep = "")
dt <- data.frame(t(dt))
dt$sample <- rownames(dt)
dt <- dt[, c(1:11, 442)]
dt_long <- tidyr::gather(dt, key = bacteria,  value = ra, -sample)
ggplot(dt_long, aes(x = sample, y = ra, fill = bacteria)) +
geom_bar(stat = "identity")
View(dt_long)
# データの読み込み
dt <- read.csv("table_mc1114_sorted_L6.csv", row.names = 1, header = T,
stringsAsFactors = F)
dt <- data.frame(t(dt))
# データの読み込み
dt <- read.csv("table_mc1114_sorted_L6.csv", row.names = 1, header = T,
stringsAsFactors = F)
View(dt)
order(dt[, 1])
dt <- dt[order(dt[, 1]), ]
# データの読み込み
dt <- read.csv("table_mc1114_sorted_L6.csv", row.names = 1, header = T,
stringsAsFactors = F)
dt <- dt[order(dt[, 1], decreasing = T), ]
other <- apply(dt[bacnum + 1:nrow(dt)], MARGIN = 2, sum)
# データの読み込み
bacnum <- 10
other <- apply(dt[bacnum + 1:nrow(dt)], MARGIN = 2, sum)
a <- t[bacnum + 1:nrow(dt), ]
other <- apply(dt[(bacnum + 1):nrow(dt), ], MARGIN = 2, sum)
other
dtOther <- rbind(dt[1:bacnum, ], other)
dtOther <- data.frame(t(dtOther))
View(dtOther)
dt <- read.csv("table_mc1114_sorted_L6.csv", row.names = 1, header = T,
stringsAsFactors = F)
dt <- dt[order(dt[, 1], decreasing = T), ] #1番目のサンプルの相対存在量で並べ替え
other <- apply(dt[(bacnum + 1):nrow(dt), ], MARGIN = 2, sum)
dtOther <- rbind(dt[1:bacnum, ], other)
row(dtOther+1) <- "Others"
rownames(dtOther+1) <- "Others"
rownames(dtOther)[bacnum + 1] <- "Others"
dtOther <- data.frame(t(dtOther))
dtOther$sample <- rownames(dtOther)
#ロング型に変形
dtLong <- tidyr::gather(dtOther, key = bacteria,  value = ra, -sample)
View(dtLong)
ggplot(dtLong, aes(x = sample, y = ra, fill = bacteria)) +
geom_bar(stat = "identity")
bacOrder <- rownames(dt)[1:bacnum]
bacOrder
bacOrder <- paste(rownames(dt)[1:bacnum], "Others")
dtLong$bacteria <- factor(dtLong$bacteria, levels = bacOrder)
ggplot(dtLong, aes(x = sample, y = ra, fill = bacteria)) +
geom_bar(stat = "identity")
bacOrder <- c(rownames(dt)[1:bacnum], "Others")
dtLong$bacteria <- factor(dtLong$bacteria, levels = bacOrder)
ggplot(dtLong, aes(x = sample, y = ra, fill = bacteria)) +
geom_bar(stat = "identity")
#ロング型に変形
dtLong <- tidyr::gather(dtOther, key = bacteria,  value = ra, -sample)
dtLong$bacteria <- factor(dtLong$bacteria, levels = bacOrder)
ggplot(dtLong, aes(x = sample, y = ra, fill = bacteria)) +
geom_bar(stat = "identity")
rev(bacOrder)
bacOrder <- rev(c(rownames(dt)[1:bacnum], "Others"))
dtOther <- data.frame(t(dtOther))
dtOther$sample <- rownames(dtOther)
# データの読み込み
bacnum <- 10
dt <- read.csv("table_mc1114_sorted_L6.csv", row.names = 1, header = T,
stringsAsFactors = F)
dt <- dt[order(dt[, 1], decreasing = T), ] #1番目のサンプルの相対存在量で並べ替え
bacOrder <- rev(c(rownames(dt)[1:bacnum], "Others"))
other <- apply(dt[(bacnum + 1):nrow(dt), ], MARGIN = 2, sum)
dtOther <- rbind(dt[1:bacnum, ], other)
rownames(dtOther)[bacnum + 1] <- "Others"
dtOther <- data.frame(t(dtOther))
dtOther$sample <- rownames(dtOther)
#ロング型に変形
dtLong <- tidyr::gather(dtOther, key = bacteria,  value = ra, -sample)
dtLong$bacteria <- factor(dtLong$bacteria, levels = bacOrder)
ggplot(dtLong, aes(x = sample, y = ra, fill = bacteria)) +
geom_bar(stat = "identity")
